<?php/** Copyright (c) 2016 www.magebuzz.com*/class Magebuzz_Privatesale_InviteController extends Mage_Core_Controller_Front_Action {  const XML_PATH_NOTIFICATION_EMAIL_TEMPLATE = 'privatesalesession/email_options/send_request_invitation_template';  const XML_PATH_SELECTED_EMAIL_SENDER_IDENTITY = 'privatesalesession/email_options/email_sender';  const XML_RECIEVED_EMAIL = 'privatesalesession/email_options/recieved_email';  public function indexAction() {    $this->loadLayout();    $this->_initLayoutMessages('customer/session');    $this->getLayout()->getBlock('head')->setTitle(Mage::helper('privatesale')->__('Invite Customer'));    $this->renderLayout();  }  private function genRandomString() {    $length = 20;    $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';    $string = '';		$maxRandValue = strlen($characters) - 1;    for ($p = 0; $p < $length; $p++) {      $string .= $characters[mt_rand(0, $maxRandValue)];    }    return $string;  }  public function inviteAction() {    if (Mage::helper('customer')->isLoggedIn()) {      $data = $this->getRequest()->getPost('email');      $message = $this->getRequest()->getPost('message');      $validator = new Zend_Validate_EmailAddress();      $model = Mage::getModel('privatesale/invite');      foreach ($data as $email) {        if ($validator->isValid($email)) {          $sign_up_code = $this->genRandomString();          $emailvars = array();          $emailvars['referer_email'] = Mage::helper('customer')->getCustomer()->getEmail();          $emailvars['referer_name'] = Mage::helper('customer')->getCustomer()->getName();          $emailvars['invited_customer_email'] = $email;          $emailvars['invited_customer_sign_up_code'] = $sign_up_code;          $emailvars['address'] = Mage::getBaseUrl() . 'customer/account/create';          $emailvars['message'] = $message;          try {            Mage::helper('privatesale')->sendInviteEmail($email, Mage::helper('customer')->getCustomer()->getName(), $emailvars);          } catch (Exception $e) {            Mage::getSingleton('customer/session')->addError($e->getMessage());          }          $invite = array('referer_id' => Mage::helper('customer')->getCustomer()->getId(), 'referer_email' => Mage::helper('customer')->getCustomer()->getEmail(), 'invited_customer_id' => 0, 'invited_customer_email' => $email, 'invited_customer_sign_up_code' => $sign_up_code);          $model->setData($invite)->save();          Mage::getSingleton('customer/session')->addSuccess(Mage::helper('privatesale')->__('Your invitation has been sent successfully'));        } else {          Mage::getSingleton('customer/session')->addError(Mage::helper('privatesale')->__('There was problem when sending invitation, please try again.'));        }      }      $this->_redirectUrl(Mage::getBaseUrl(Mage_Core_Model_Store::URL_TYPE_WEB) . "privatesale/invite");    } else $this->_redirectUrl(Mage::getBaseUrl() . 'customer/account');  }  public function checkAction() {    $data = $this->getRequest()->getPost();    $validator = new Zend_Validate_EmailAddress();    if ($validator->isValid($data['email'])) {      $collection = Mage::getModel('customer/customer')->getCollection()->addFieldToFilter('email', $data['email'])->getData();      if (empty($collection)) echo 0; else echo 1;    } else {      echo -1;    }  }  public function waitinglistAction() {    $this->loadLayout();    $this->_initLayoutMessages('customer/session');    $this->renderLayout();  }  public function sendwaitingAction() {    $dataSend = $this->getRequest()->getParams();    $model = Mage::getModel('privatesale/waiting');    $customerSession = Mage::getSingleton('customer/session');    $collection = $model->getCollection()->addFieldToFilter('status', array('in' => array(Magebuzz_Privatesale_Model_Statuswaiting::STATUS_PENDING, Magebuzz_Privatesale_Model_Statuswaiting::STATUS_APPROVED)))->addFieldToFilter('email_waiting', $dataSend['email_waiting']);    $waitingOld = $collection->getFirstItem()->getData();    if (empty($waitingOld)) {      $model->setData($dataSend);      $model->setStatus(Magebuzz_Privatesale_Model_Statuswaiting::STATUS_PENDING);      try {        $model->save();        $isAllsow = (int)Mage::getStoreConfig('privatesalesession/email_options/allow_send_notification');        if ($isAllsow) {          $template = Mage::getStoreConfig(self::XML_PATH_NOTIFICATION_EMAIL_TEMPLATE, $storeId);          $sendTo = Mage::getStoreConfig(self::XML_RECIEVED_EMAIL, $storeId);          $dataSend['send_to'] = $sendTo;          Mage::helper('privatesale')->sendMail($template, $sendTo, $dataSend);        }        Mage::getSingleton('customer/session')->addSuccess(Mage::helper('privatesale')->__('Thank you for interest in our store. We will have a look and send you a registration code as soon as possible'));      } catch (Exception $e) {        Mage::getSingleton('customer/session')->addError(Mage::helper('privatesale')->__('Send Request Error'));      }    } else {      Mage::getSingleton('customer/session')->addError(Mage::helper('privatesale')->__('There is already a waiting list with this email address!'));    }    $this->loadLayout();    $this->renderLayout();  }}