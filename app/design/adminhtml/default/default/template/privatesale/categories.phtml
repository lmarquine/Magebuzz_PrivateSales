<?php
?>
<div class="entry-edit">
  <div class="entry-edit-head">
    <h4
      class="icon-head head-edit-form fieldset-legend"><?php echo Mage::helper('privatesale')->__('Select Category') ?></h4>
  </div>
  <fieldset>
    <input name="category_ids" id="category_ids" value="32"/>

    <div id="tree-div" class="tree" style="width:auto;"></div>
  </fieldset>
</div>
<?php if ($this->getRoot()): ?>
  <style>
    .em {
      font-style: italic;
    }

    .category-slelected {
      color: red;
      background-color: yellow;
      font-weight: bold;
    }
  </style>
  <script type="text/javascript">
    //<![CDATA[
    if ((typeof FORM_KEY) == 'undefined') {
      FORM_KEY = '';
    }
    var tree;

    /**
     * Fix ext compatibility with prototype 1.6
     */
    Ext.lib.Event.getTarget = function (e) {
      var ee = e.browserEvent || e;
      return ee.target ? Event.element(ee) : null;
    };

    /**
     * Extend standard TreePanel
     */
    Ext.tree.TreePanel.Enhanced = function (el, config) {
      Ext.tree.TreePanel.Enhanced.superclass.constructor.call(this, el, config);
    };
    Ext.extend(Ext.tree.TreePanel.Enhanced, Ext.tree.TreePanel, {
      /**
       * Category click event hanlder
       */
      categoryClick: function (node, e) {
        if (!node.disabled) {

          $$('category-slelected').each(function (index) {
            index.removeClass("category-slelected");
          });

          $('category_ids').value = node.id;
        }
      }
    });

    /**
     * Initialize tree and its loader when extjs is ready
     */
    Ext.onReady(function () {
      categoryLoader = new Ext.tree.TreeLoader({
        dataUrl: '<?php echo $this->getLoadTreeUrl() ?>'
      });

      /**
       * Render tree node from config
       * Nodes text is generated from `name` and `products` attributes
       */
      categoryLoader.createNode = function (config) {
        var _node = Object.clone(config);
        var defaultCategoryId = $('category_ids').value;
        if (defaultCategoryId == _node.id) {
          _node.text = '<span class="category-slelected">' + _node.name + ' (' + _node.product_count + ')' + '</span>';
        } else {
          _node.text = '<span>' + _node.name + ' (' + _node.product_count + ')' + '</span>';
        }
        if (_node.children_count && !_node.children) {
          return new Ext.tree.AsyncTreeNode(_node);
        }
        return new Ext.tree.TreeNode(_node);
      };

      /**
       * Render tree nodes recursively
       */
      categoryLoader.buildCategoryTree = function (parent, config) {
        if (!config) {
          return;
        }
        if (parent && config && config.length) {
          for (var i in config) {
            if (!isNaN(i)) {
              var node = this.createNode(config[i]);
              parent.appendChild(node);
              node.loader = node.getOwnerTree().loader;
              if (config[i].children && config[i].children.length) {
                this.buildCategoryTree(node, config[i].children);
              }
            }
          }
        }
      };

      /**
       * Add additional params before loading asynchronous mode
       */
      categoryLoader.on('beforeload', function (treeLoader, node) {
        treeLoader.baseParams.id = node.attributes.id;
        treeLoader.baseParams.form_key = FORM_KEY;
      });

      // render categories tree
      var config = <?php echo $this->getTreeArray(null, TRUE)?>;
      tree = new Ext.tree.TreePanel.Enhanced('tree-div', {
        animate: false,
        loader: categoryLoader,
        enableDD: false,
        containerScroll: true,
        selModel: new Ext.tree.CheckNodeMultiSelectionModel(),
        rootVisible: false,
        useAjax: true,
        addNodeTo: false
      });
      var root = new Ext.tree.TreeNode(config);
      tree.setRootNode(root);
      tree.addListener('click', tree.categoryClick);
      tree.loader.buildCategoryTree(root, config.children);
      tree.el.dom.innerHTML = '';
      tree.render();
    });
    //]]>
  </script>
<?php endif; ?>
